---
# tasks file for easy_rsa

- name: Include distribution specific variables
  include_vars: "{{ ansible_distribution }}.yml"
  tags:
    - easy_rsa

- include: CentOS.yml
  when: ansible_distribution == "CentOS"
  tags:
    - easy_rsa

- include: Ubuntu.yml
  when: ansible_distribution == "Ubuntu"
  tags:
    - easy_rsa

- name: Create CA directory
  become: yes
  command: make-cadir {{ easy_rsa_ca_dir }}
  args:
    creates: "{{ easy_rsa_ca_dir }}"
  tags:
    - easy_rsa

- name: Create keys directory
  become: yes
  file:
    path: "{{ easy_rsa_key_dir }}"
    owner: root
    group: root
    mode: 0700
    state: directory
  tags:
    - easy_rsa

- name: Create vars configuration file
  become: yes
  template:
    src: vars.j2
    dest: "{{ easy_rsa_ca_dir }}/vars"
    owner: root
    group: root
    mode: 0644
  tags:
    - easy_rsa

- name: Prep the keys directory
  become: yes
  shell: ". ./vars; ./clean-all >/dev/null"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/index.txt"
  tags:
    - easy_rsa

- name: Generate Diffie-Hellman parameters
  become: yes
  shell: ". ./vars; ./build-dh >/dev/null"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/dh{{ easy_rsa_key_size }}.pem"
  tags:
    - easy_rsa

- name: Build CA
  become: yes
  shell: ". ./vars; ./pkitool --initca >/dev/null"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/ca.key"
  tags:
    - easy_rsa

- name: Generate server certificate and key
  become: yes
  shell: ". ./vars; ./pkitool --server {{ easy_rsa_key_name }} >/dev/null"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/{{ easy_rsa_key_name }}.key"
  tags:
    - easy_rsa

- name: Generate CRL file
  become: yes
  shell: '. ./vars; $OPENSSL ca -gencrl -out {{ easy_rsa_key_dir }}/crl.pem -config "$KEY_CONFIG"'
  environment:
    KEY_CN: ""
    KEY_OU: ""
    KEY_NAME: ""
    KEY_ALTNAMES: ""
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/crl.pem"
  tags:
    - easy_rsa

- name: Check list of clients vs revokes
  fail: msg="There are clients set to create and revoke at the same time. Can't be"
  when: "{{ (easy_rsa_clients | intersect(easy_rsa_clients_revoke) | length) > 0 }}"

- name: Check certificate index
  become: yes
  command: awk '$0 ~ /\/CN={{ item }}\// {} END {print $1}' "{{ easy_rsa_key_dir }}/index.txt"
  register: certificate_index
  with_items: "{{ easy_rsa_clients_revoke }}"
  always_run: true

- name: Revoke client certificates
  become: yes
  shell: ". ./vars; ./revoke-full {{ item }}"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
  with_items:
    - "{{ easy_rsa_clients_revoke }}"
  when: (certificate_index.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first | default("R")) == "V"
  register: revoke_return
  failed_when: revoke_return.rc > 0 and revoke_return.rc != 2

- name: Remove revoke client *.key file
  become: yes
  file: path="{{ easy_rsa_key_dir }}/{{ item}}.key" state=absent
  with_items: "{{ revoke_return.results | selectattr('changed') | map(attribute='item') | list }}"

- name: Generate client certificates and keys
  become: yes
  shell: ". ./vars; ./pkitool {{ item }} >/dev/null"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
    creates: "{{ easy_rsa_key_dir }}/{{ item }}.key"
  with_items:
    - "{{ easy_rsa_clients }}"
  when: (certificate_index.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list | first | default("R")) != "V"
  tags:
    - easy_rsa

